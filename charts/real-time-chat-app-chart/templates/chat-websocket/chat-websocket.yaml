apiVersion: v1
kind: ConfigMap
metadata:
  name: websocket-config
  namespace: {{ .Values.namespace }}  # Ensure this matches the namespace you're using
data:
  EXTERNAL_BROKER_HOST: "http://rabbitmq"  # Example config for WebSocket host
  EXTERNAL_BROKER_PORT: "61613"
  USE_EXTERNAL_BROKER: "false"   

---

apiVersion: v1
kind: Secret
metadata:
  name: websocket-secret
  namespace: {{ .Values.namespace }}  # Ensure the namespace is correct
type: Opaque
data:
  EXTERNAL_BROKER_CLIENT_LOGIN: Z3Vlc3Q=  # Base64 encoded value for the secret
  EXTERNAL_BROKER_CLIENT_PASSCODE: Z3Vlc3Q=

---

apiVersion: apps/v1
kind: Deployment
metadata:
  name: chat-websocket-deployment
  labels:
    app: chat-websocket
  namespace: {{ .Values.namespace }}
spec:
  replicas: 1  # Number of desired pods
  selector:
    matchLabels:
      app: chat-websocket
  template:
    metadata:
      labels:
        app: chat-websocket
    spec:
      containers:
      - name: chat-websocket
        image: runaydhaygude/external-broker-websocket:amd64  # Replace with your image name
        imagePullPolicy: Always
        ports:
        - containerPort: 8080
        envFrom:
        - configMapRef:
            name: websocket-config # Inject all keys from ConfigMap into environment variables
        - secretRef:
            name: websocket-secret  # Inject all keys from Secret into environment variables


---


apiVersion: v1
kind: Service
metadata:
  name: chat-websocket-service
  namespace: {{ .Values.namespace }}
spec:
  type: ClusterIP
  ports:
  - port: 8080         # Port exposed by the service
    targetPort: 8080   # Port on the container
  selector:
    app: chat-websocket  # Match the pods labeled with app: angular-app
